#!/usr/bin/env python
import argparse
import re

parser = argparse.ArgumentParser(description='Process some integers.')
parser.add_argument('molecule',
                    nargs=1,
                    help='need a molecule chemical formula (ex: "Mg(OH)2")')

molecule_str = parser.parse_args().molecule[0]

def parse_molecule(molecule_str):
    molecule_arr = parse_molecule_to_array(molecule_str)
    return merge_dict(molecule_arr)

def merge_dict(molecule_arr):
    molecule_dict = {}
    for elem in molecule_arr:
        print elem
        for key in elem:
            print key
            if molecule_dict.has_key(key):
                molecule_dict[key] += elem[key]
            else:
                molecule_dict[key] = elem[key]
    return molecule_dict

def parse_molecule_to_array(molecule_str, factor = 1):
    matcher = re.compile(r"([^\[\]]*)\[(.*)\]([0-9]+)?|([^\(\)]*)\((.*)\)([0-9]*)")
    re_result = matcher.search(molecule_str)
    if re_result:
        return add_dict_in_arr(re_result, factor)
    else:
        return parse_molecule_to_dict(molecule_str, factor)

def add_dict_in_arr(re_result, factor):
    molecule_arr = []
    result = remove_none_elem(re_result.groups())
    molecule_arr += parse_molecule_to_dict(result[0], factor)
    if len(result) < 3 or result[2] == '':
        molecule_arr += parse_molecule_to_array(result[1], factor)
    else:
        molecule_arr += parse_molecule_to_array(result[1], factor * int(result[2]))
    return molecule_arr

def remove_none_elem(contnair):
    array = []
    for elem in contnair:
        if elem != None:
            array.append(elem)
    return array

def parse_molecule_to_dict(molecule_str, factor):
    matcher = re.compile(r'(([A-Z][a-z]?)([0-9]+?)*)')
    re_result = matcher.finditer(molecule_str)
    array = []
    for match in re_result:
        array.append(set_data_in_dict(match, factor))
    return array

def set_data_in_dict(match, factor):
    result = {}
    key =  get_key(match)
    value = get_value(match) * factor
    result[key] = value

    return result

def get_key(match):
    return str(match.groups()[1])

def get_value(match):
    if match.groups()[2]:
        return int(match.groups()[2])
    else:
        return 1

print parse_molecule(molecule_str)
